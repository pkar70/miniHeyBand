
Imports System.Text
Imports Microsoft.Toolkit.Uwp.Connectivity
Imports Windows.ApplicationModel.DataTransfer
Imports Windows.Devices.Bluetooth
Imports Windows.Devices.Bluetooth.GenericAttributeProfile
Imports Windows.Devices.Radios
Imports Windows.Storage
Imports Windows.Storage.Streams
Imports Windows.UI.Core
Imports Windows.UI.Popups
Imports System.Net.Http
Imports Windows.ApplicationModel.Background
Imports Windows.Devices.Sms
Imports Windows.System.Profile

''' <summary>
''' Provides application-specific behavior to supplement the default Application class.
''' </summary>
''' 
Public Class Urzadzenie
    Public Property Nazwa As String = ""
    Public Property Adres As String = ""
    ' Public Property IkonkaRSSI As String = "ZeroBars"
    Public Property RSSI As String = ""
    Public Property isSelected As Boolean = False
    <CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId:="Bg")>
    Public Property KolorBg As String = "White"

    <CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId:="long")>
    Public AdresLong As ULong   ' do porownan
    Public RSSIcurrent As Integer = 0
    Public RSSImin As Integer = 128    ' max raportowane: 127
    Public RSSImax As Integer = -129   ' min raportowane: -128
    Public iCntTillDeath As Integer = 20    ' w sekundach, za ile ma zniknac
End Class

NotInheritable Class App
    Inherits Application

#Region "AutoGenerated"


    ''' <summary>
    ''' Invoked when the application is launched normally by the end user.  Other entry points
    ''' will be used when the application is launched to open a specific file, to display
    ''' search results, and so forth.
    ''' </summary>
    ''' <param name="e">Details about the launch request and process.</param>
    Protected Overrides Sub OnLaunched(e As Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)
        Dim rootFrame As Frame = TryCast(Window.Current.Content, Frame)

        ' Do not repeat app initialization when the Window already has content,
        ' just ensure that the window is active

        If rootFrame Is Nothing Then
            ' Create a Frame to act as the navigation context and navigate to the first page
            rootFrame = New Frame()

            AddHandler rootFrame.NavigationFailed, AddressOf OnNavigationFailed
            ' PKAR added wedle https://stackoverflow.com/questions/39262926/uwp-hardware-back-press-work-correctly-in-mobile-but-error-with-pc
            AddHandler SystemNavigationManager.GetForCurrentView().BackRequested, AddressOf OnBackButtonPressed
            AddHandler rootFrame.Navigated, AddressOf OnNavigatedAddBackButton

            If e.PreviousExecutionState = ApplicationExecutionState.Terminated Then
                ' TODO: Load state from previously suspended application
                ' zerowanie zmiennych, powinno sobie poradzic z reinit wtedy kiedy trzeba
                ' (jako proba likwidacji tego ze czasem przestaje dzialac - to moze wlasnie po wyrzuceniu z pamieci, gdy po powrocie moBLE <> Null, ale jest falszywką
                moLista = Nothing
                moBLE = Nothing
                moHttp = Nothing
                mBLEwait = False
                mBLEresponseReady = False
            End If
            ' Place the frame in the current Window
            Window.Current.Content = rootFrame
        End If

        If e.PrelaunchActivated = False Then
            If rootFrame.Content Is Nothing Then
                ' When the navigation stack isn't restored navigate to the first page,
                ' configuring the new page by passing required information as a navigation
                ' parameter
                rootFrame.Navigate(GetType(MainPage), e.Arguments)
            End If

            ' Ensure the current window is active
            Window.Current.Activate()
        End If
    End Sub

    ''' <summary>
    ''' Invoked when Navigation to a certain page fails
    ''' </summary>
    ''' <param name="sender">The Frame which failed navigation</param>
    ''' <param name="e">Details about the navigation failure</param>
    Private Sub OnNavigationFailed(sender As Object, e As NavigationFailedEventArgs)
        Throw New Exception("Failed to load Page " + e.SourcePageType.FullName)
    End Sub

    ''' <summary>
    ''' Invoked when application execution is being suspended.  Application state is saved
    ''' without knowing whether the application will be terminated or resumed with the contents
    ''' of memory still intact.
    ''' </summary>
    ''' <param name="sender">The source of the suspend request.</param>
    ''' <param name="e">Details about the suspend request.</param>
    Private Sub OnSuspending(sender As Object, e As SuspendingEventArgs) Handles Me.Suspending
        Dim deferral As SuspendingDeferral = e.SuspendingOperation.GetDeferral()
        ' TODO: Save application state and stop any background activity
        deferral.Complete()
    End Sub



#End Region

#Region "moja biblioteka"

    ' PKAR added wedle https://stackoverflow.com/questions/39262926/uwp-hardware-back-press-work-correctly-in-mobile-but-error-with-pc
    Private Sub OnNavigatedAddBackButton(sender As Object, e As NavigationEventArgs)
        Dim oFrame As Frame = TryCast(sender, Frame)
        Dim oNavig As SystemNavigationManager = SystemNavigationManager.GetForCurrentView

        If oFrame.CanGoBack Then
            oNavig.AppViewBackButtonVisibility = AppViewBackButtonVisibility.Visible
        Else
            oNavig.AppViewBackButtonVisibility = AppViewBackButtonVisibility.Collapsed
        End If

    End Sub

    Private Sub OnBackButtonPressed(sender As Object, e As BackRequestedEventArgs)
        Try
            TryCast(Window.Current.Content, Frame).GoBack()
            e.Handled = True
        Catch ex As Exception
        End Try
    End Sub


    Public Shared Function GetSettingsString(sName As String, Optional sDefault As String = "") As String
        Dim sTmp As String

        sTmp = sDefault

        If ApplicationData.Current.RoamingSettings.Values.ContainsKey(sName) Then
            sTmp = ApplicationData.Current.RoamingSettings.Values(sName).ToString
        End If
        If ApplicationData.Current.LocalSettings.Values.ContainsKey(sName) Then
            sTmp = ApplicationData.Current.LocalSettings.Values(sName).ToString
        End If

        Return sTmp

    End Function

    Public Shared Sub SetSettingsString(sName As String, sValue As String, Optional bRoam As Boolean = False)
        Try
            If bRoam Then ApplicationData.Current.RoamingSettings.Values(sName) = sValue
            ApplicationData.Current.LocalSettings.Values(sName) = sValue
        Catch ex As Exception

        End Try
        ' try/catch, bo zmienna ma długość limitowaną (i InternalLog jest za krótki)
    End Sub




    <CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId:="int")>
    Public Shared Function GetSettingsInt(sName As String, Optional iDefault As Integer = 0) As Integer
        Dim sTmp As Integer

        sTmp = iDefault

        If ApplicationData.Current.RoamingSettings.Values.ContainsKey(sName) Then
            sTmp = CInt(ApplicationData.Current.RoamingSettings.Values(sName).ToString)
        End If
        If ApplicationData.Current.LocalSettings.Values.ContainsKey(sName) Then
            sTmp = CInt(ApplicationData.Current.LocalSettings.Values(sName).ToString)
        End If

        Return sTmp

    End Function

    <CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId:="System.Int32.ToString")>
    Public Shared Sub SetSettingsInt(sName As String, sValue As Integer, Optional bRoam As Boolean = False)
        If bRoam Then ApplicationData.Current.RoamingSettings.Values(sName) = sValue.ToString
        ApplicationData.Current.LocalSettings.Values(sName) = sValue.ToString
    End Sub



    <CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId:="bool")>
    Public Shared Function GetSettingsBool(sName As String, Optional iDefault As Boolean = False) As Boolean
        Dim sTmp As Boolean

        sTmp = iDefault

        If ApplicationData.Current.RoamingSettings.Values.ContainsKey(sName) Then
            sTmp = CBool(ApplicationData.Current.RoamingSettings.Values(sName).ToString)
        End If
        If ApplicationData.Current.LocalSettings.Values.ContainsKey(sName) Then
            sTmp = CBool(ApplicationData.Current.LocalSettings.Values(sName).ToString)
        End If

        Return sTmp

    End Function

    Public Shared Sub SetSettingsBool(sName As String, sValue As Boolean, Optional bRoam As Boolean = False)
        If bRoam Then ApplicationData.Current.RoamingSettings.Values(sName) = sValue.ToString
        ApplicationData.Current.LocalSettings.Values(sName) = sValue.ToString
    End Sub

    'Public Shared Sub SetBadgeNo(iInt As Integer)
    '    ' https://docs.microsoft.com/en-us/windows/uwp/controls-and-patterns/tiles-and-notifications-badges
    '    Dim oXmlBadge = BadgeUpdateManager.GetTemplateContent(BadgeTemplateType.BadgeNumber)
    '    Dim oXmlNum As XmlElement = CType(oXmlBadge.SelectSingleNode("/badge"), XmlElement)
    '    oXmlNum.SetAttribute("value", iInt.ToString)
    '    BadgeUpdateManager.CreateBadgeUpdaterForApplication().Update(New BadgeNotification(oXmlBadge))
    'End Sub
    Public Shared Function XmlSafeString(sInput As String) As String
        If sInput Is Nothing Then Return Nothing
        Dim sTmp As String
        sTmp = sInput.Replace("&", "&amp;")
        sTmp = sTmp.Replace("<", "&lt;")
        sTmp = sTmp.Replace(">", "&gt;")
        Return sTmp
    End Function

    'Public Shared Sub MakeToast(sMsg As String, Optional sMsg1 As String = "")
    '    Dim sXml = "<visual><binding template='ToastGeneric'><text>" & XmlSafeString(sMsg)
    '    If sMsg1 <> "" Then sXml = sXml & "</text><text>" & XmlSafeString(sMsg1)
    '    sXml = sXml & "</text></binding></visual>"
    '    Dim oXml = New XmlDocument
    '    oXml.LoadXml("<toast>" & sXml & "</toast>")
    '    Dim oToast = New ToastNotification(oXml)
    '    ToastNotificationManager.CreateToastNotifier().Show(oToast)
    'End Sub

    Public Shared Function GetLangString(sMsg As String) As String
        Dim sRet As String = sMsg
        Try
            sRet = Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView().GetString(sMsg)
        Catch
        End Try
        Return sRet
    End Function

    Public Shared Sub DialogBoxRes(sMsg As String)
        DialogBoxRes(sMsg, "")
    End Sub

    Public Shared Sub DialogBoxRes(sMsg As String, sAddInfo As String)
        Dim sTxt As String = GetLangString(sMsg)
        If sAddInfo IsNot Nothing Then sTxt = sTxt & ":" & sAddInfo
        DialogBox(sTxt)
    End Sub
    Public Shared Async Sub DialogBox(sMsg As String)
        ' poniewaz jest tu duzo errorów...
        Dim bError As Boolean = False

        Try
            Dim oMsg As MessageDialog = New MessageDialog(sMsg)
            Await oMsg.ShowAsync
        Catch ex As Exception
            bError = True
        End Try

        If bError Then IntLogAppend(0, "in DialogBox " & sMsg)
    End Sub
    Public Shared Async Sub DialogBoxError(iNr As Integer, sMsg As String)
        Dim sTxt As String = Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView().GetString("errAnyError")
        sTxt = sTxt & " (" & iNr & ")" & vbCrLf & sMsg
        Dim oMsg As MessageDialog = New MessageDialog(sTxt)
        Await oMsg.ShowAsync
    End Sub

    Public Shared Async Function DialogBoxResYN(sMsgResId As String, Optional sYesResId As String = "resDlgYes", Optional sNoResId As String = "resDlgNo") As Task(Of Boolean)
        Dim sMsg, sYes, sNo As String

        With Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView()
            sMsg = .GetString(sMsgResId)
            sYes = .GetString(sYesResId)
            sNo = .GetString(sNoResId)
        End With

        Dim oMsg As MessageDialog = New MessageDialog(sMsg)
        Dim oYes As UICommand = New UICommand(sYes)
        Dim oNo As UICommand = New UICommand(sNo)
        oMsg.Commands.Add(oYes)
        oMsg.Commands.Add(oNo)
        oMsg.DefaultCommandIndex = 1    ' default: No
        Dim oCmd As UICommand = Await oMsg.ShowAsync
        If oCmd Is Nothing Then Return False
        If oCmd.Label = sYes Then Return True

        Return False

    End Function

    Public Shared Async Function DialogBoxInput(sMsgResId As String, Optional sDefaultResId As String = "", Optional sYesResId As String = "resDlgContinue", Optional sNoResId As String = "resDlgCancel") As Task(Of String)
        Dim sMsg, sYes, sNo, sDefault As String

        sDefault = ""

        With Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView()
            sMsg = .GetString(sMsgResId)
            sYes = .GetString(sYesResId)
            sNo = .GetString(sNoResId)
            If sDefaultResId <> "" Then sDefault = .GetString(sDefaultResId)
        End With

        If sMsg = "" Then sMsg = sMsgResId  ' zabezpieczenie na brak string w resource
        If sYes = "" Then sYes = sYesResId
        If sNo = "" Then sNo = sNoResId
        If sDefault = "" Then sDefault = sDefaultResId

        Dim oInputTextBox As TextBox = New TextBox
        oInputTextBox.AcceptsReturn = False
        oInputTextBox.Text = sDefault
        Dim oDlg As ContentDialog = New ContentDialog
        oDlg.Content = oInputTextBox
        oDlg.PrimaryButtonText = sYes
        oDlg.SecondaryButtonText = sNo
        oDlg.Title = sMsg

        Dim oCmd As ContentDialogResult = Await oDlg.ShowAsync
        If oCmd <> ContentDialogResult.Primary Then Return ""

        Return oInputTextBox.Text

    End Function

    Public Shared Function GetRoamingFolder(Optional bMsgErr As Boolean = False) As StorageFolder
        Dim oFold As StorageFolder = Nothing
        Try
            oFold = Windows.Storage.ApplicationData.Current.LocalFolder '  .RoamingFolder
        Catch ex As Exception
        End Try

        If oFold Is Nothing Then
            If bMsgErr Then DialogBoxRes("errNoRoamFolder")
            Return Nothing
        End If
        Return oFold
    End Function

    Public Shared Async Function GetRoamingFile(sName As String, bCreate As Boolean) As Task(Of StorageFile)
        Dim oFold As StorageFolder = GetRoamingFolder(True)
        If oFold Is Nothing Then Return Nothing

        Dim bErr As Boolean = False
        Dim oFile As StorageFile = Nothing
        Try
            If bCreate Then
                oFile = Await oFold.CreateFileAsync(sName, CreationCollisionOption.ReplaceExisting)
            Else
                oFile = Await oFold.GetFileAsync(sName)
            End If
        Catch ex As Exception
            bErr = True
        End Try
        If bErr Then
            Return Nothing
        End If

        Return oFile
    End Function

    Public Shared Function IsNetIPavailable(bMsg As Boolean) As Boolean
        If Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable() Then Return True
        If bMsg Then
            DialogBox("ERROR: no IP network available")
        End If
        Return False
    End Function

    Public Shared Async Function IsNetBTavailable(bMsg As Boolean) As Task(Of Boolean)

        ' sprawdzamy czy jest Bluetooth w ogole dostepny
        Dim bError As Boolean = True
        Dim oRadios As IReadOnlyList(Of Radio) = Await Radio.GetRadiosAsync()
        For Each oRadio As Radio In oRadios
            If oRadio.Kind = RadioKind.Bluetooth Then
                bError = False
                Exit For
            End If
        Next

        If bError Then
            If bMsg Then App.DialogBox("ERROR: no Bluetooth available")
            Return False
        End If

        bError = True
        For Each oRadio As Radio In oRadios
            If oRadio.Kind = RadioKind.Bluetooth And oRadio.State = RadioState.On Then
                bError = False
                Exit For
            End If
        Next

        If bError Then
            If bMsg Then App.DialogBox("ERROR: Bluetooth is not enabled")
            Return False
        End If

        Return True

    End Function

    Public Shared Sub ClipPut(sTxt As String)
        Dim oClipCont As DataPackage = New DataPackage
        oClipCont.RequestedOperation = DataPackageOperation.Copy
        oClipCont.SetText(sTxt)
        Clipboard.SetContent(oClipCont)
    End Sub

    Public Async Function ClipGet() As Task(Of String)
        Dim oClipCont As DataPackageView = Clipboard.GetContent
        Return Await oClipCont.GetTextAsync()
    End Function
#End Region

#Region "Bluetooth"

    Public Shared moLista As ObservableCollection(Of Urzadzenie)
    Public Shared msNoName As String
    ' Public Shared moBLEobs As ObservableBluetoothLEDevice
    Public Shared moBLE As BluetoothLEDevice
    Public Shared moHttp As HttpClient
    Private Shared mBLEwait As Boolean = False
    Private Shared mBLEresponseReady As Boolean = False
    Private Shared moResponseData(1024) As Byte
    Private Shared moResponseLen As Integer


    Public Shared Function IsThisMoje() As Boolean
        If App.GetSettingsString("bindedToAddr") = "242675718375126" Then Return True
        Return False
    End Function

    Public Shared Function CheckDaysPassed(sVarname As String, iDays As Integer) As Integer
        Dim iLastCheck As Integer = App.GetSettingsInt(sVarname, 0)
        Dim iToday As Integer = Date.Now.ToString("yyMMdd")
        If iLastCheck + iDays > iToday Then Return 0
        Return iToday
    End Function

    Public Shared Async Function BindMoBleAsync(lAddr As ULong) As Task
        ' jednolinijkowe - zeby nie includowac z MainPage
        Try
            moBLE = Await BluetoothLEDevice.FromBluetoothAddressAsync(lAddr)
        Catch ex As Exception
            moBLE = Nothing
        End Try
    End Function

    Public Shared Async Function GetBLEservice(sUUID As String, bLocalErr As Boolean) As Task(Of GattDeviceService)
        IntLogAppend(1, "GetBLESvc - START")

        If sUUID.Length < 5 Then sUUID = "0000" & sUUID
        If sUUID.Length < 10 Then sUUID = sUUID & "-0000-1000-8000-00805f9b34fb"
        Dim oGUID As Guid = New Guid(sUUID)

        If moBLE Is Nothing Then
            IntLogAppend(2, "GBS moBLE null - reconnect")

            Dim lAddr As ULong = GetSettingsString("bindedToAddr", "0")
            If lAddr = 0 Then
                IntLogAppend(0, "GBS no address")
                If bLocalErr Then DialogBox("BT comm error, not binded!")
                Return Nothing
            End If
            Await BindMoBleAsync(lAddr)
            If moBLE Is Nothing Then
                IntLogAppend(0, "GBS cannot bind")
                ' na tym wylatuje w Timer
                If bLocalErr Then DialogBox("BT comm error, cannot bind")
                Return Nothing
            End If
        End If

        Dim oList As GattDeviceServicesResult = Await App.moBLE.GetGattServicesForUuidAsync(oGUID)
        If Not oList.Status = GenericAttributeProfile.GattCommunicationStatus.Success Then
            IntLogAppend(0, "GBS getsvc.status <> Success")
            If bLocalErr Then App.DialogBox("BT comm error, Svc GattStatus = " & oList.Status)
            Return Nothing
        End If
        If oList.Services.Count <> 1 Then
            IntLogAppend(0, "GBS svc.count <> 1")
            If bLocalErr Then App.DialogBox("BT comm error, services count <> 1")
            Return Nothing
        End If
        Return oList.Services.ElementAt(0)
        ' moze: ObservableGattDeviceService(GattDeviceService)
    End Function

    Public Shared Async Function GetBLEcharact(sSvcUUID As String, sCharUUID As String, bLocalErr As Boolean) As Task(Of GattCharacteristic)
        IntLogAppend(1, "GetBLEcharact - START")

        Dim oSvc As GattDeviceService = Await GetBLEservice(sSvcUUID, bLocalErr)
        If oSvc Is Nothing Then
            IntLogAppend(0, "GBC GetBleSvc null")
            Return Nothing
        End If
        If sCharUUID.Length < 5 Then sCharUUID = "0000" & sCharUUID
        If sCharUUID.Length < 10 Then sCharUUID = sCharUUID & "-0000-1000-8000-00805f9b34fb"
        Dim oGUID As Guid = New Guid(sCharUUID)
        Dim oList As GattCharacteristicsResult = Await oSvc.GetCharacteristicsForUuidAsync(oGUID)
        If Not oList.Status = GenericAttributeProfile.GattCommunicationStatus.Success Then
            IntLogAppend(0, "GBC getChar.status <> Success")
            If bLocalErr Then App.DialogBox("BT comm error, Char GattStatus = " & oList.Status)
            Return Nothing
        End If
        If oList.Characteristics.Count <> 1 Then
            IntLogAppend(0, "GBC char.count <> 1")
            If bLocalErr Then App.DialogBox("BT comm error, characteristics count <> 1")
            Return Nothing
        End If

        Return oList.Characteristics.ElementAt(0)
        ' ale moze: Dim os = ObservableGattCharacteristics(GattCharacteristic, ObservableGattDeviceService)
    End Function

    Public Shared Async Function ReadBLEchars(sSvcUUID As String, sCharUUID As String, bLocalErr As Boolean) As Task(Of String)
        Dim oChar As GattCharacteristic = Await GetBLEcharact(sSvcUUID, sCharUUID, bLocalErr)
        If oChar Is Nothing Then Return ""
        Dim oRes As GattReadResult = Await oChar.ReadValueAsync
        If Not oRes.Status = GenericAttributeProfile.GattCommunicationStatus.Success Then
            If bLocalErr Then App.DialogBox("BT comm error, Read GattStatus = " & oRes.Status)
            Return Nothing
        End If

        Dim oArr As Byte() = oRes.Value.ToArray
        Dim sTxt As String = ""
        For i As Integer = 0 To oArr.GetUpperBound(0)
            sTxt = sTxt & ChrW(oArr(i))
        Next
        Return sTxt
        ' wtedy ObservableGattCharacteristics.ReadValueAsync zwraca string , albo wrecz .Value
    End Function

    ' Private Shared aBuffer(20) As Byte

    Public Shared Async Function WaitForBandNotify(iWaitSecsForResponse As Integer) As Task(Of Byte())
        ' fragment z funkcji SendBandCommand

        IntLogAppend(1, "WaitForBandNotify - START")
        Dim oCharRd As GattCharacteristic

        oCharRd = Await GetBLEcharact("6e40fff0-b5a3-f393-e0a9-e50e24dcca9e", "6e400003-b5a3-f393-e0a9-e50e24dcca9e", True)
        If Not oCharRd.CharacteristicProperties.HasFlag(GattCharacteristicProperties.Notify) Then
            IntLogAppend(0, "WFBN ERR w/o notify")
            DialogBox("notify to chars without notify property?")
            Return Nothing
        End If
        IntLogAppend(2, "WFBN got oCharRd")

        mBLEwait = True
        ' za https://docs.microsoft.com/en-us/windows/uwp/devices-sensors/gatt-client
        Dim oResNot As GattCommunicationStatus = Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify)
        If oResNot <> GattCommunicationStatus.Success Then
            IntLogAppend(0, "WFBN ERR notify subs")
            DialogBox("notify subscription error")
            mBLEwait = False
            Return Nothing
        End If
        AddHandler oCharRd.ValueChanged, AddressOf BTcharOnNotify
        IntLogAppend(2, "WFBN added handler")

        Dim aByte As Byte() = {1}   ' zeby nie NULL
        If iWaitSecsForResponse = 0 Then Return aByte
        IntLogAppend(2, "WFBN waiting start")

        For iWait As Integer = 1 To iWaitSecsForResponse   ' licznik sekund
            For jWait As Integer = 1 To 5          ' ta petla ma byc na sekundę
                Await Task.Delay(100)
                If mBLEresponseReady Then
                    mBLEwait = False
                    Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.None)
                    Return moResponseData
                End If
            Next
        Next

        Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.None)

        IntLogAppend(0, "WFBN ERR timeout")

        DialogBox("timeout waiting for response")
        Return Nothing

    End Function

    Public Shared Async Function SendBandCommand(iWaitSecsForResponse As Integer, iCmd As Integer,
          Optional b1 As Byte = 0, Optional b2 As Byte = 0, Optional b3 As Byte = 0, Optional b4 As Byte = 0, Optional b5 As Byte = 0, Optional b6 As Byte = 0, Optional b7 As Byte = 0, Optional b8 As Byte = 0,
          Optional b9 As Byte = 0, Optional b10 As Byte = 0, Optional b11 As Byte = 0, Optional b12 As Byte = 0, Optional b13 As Byte = 0, Optional b14 As Byte = 0, Optional b15 As Byte = 0) As Task(Of Byte())

        IntLogAppend(1, "SendBarCommand - START")
        Dim oWriter As DataWriter = New DataWriter
        Dim iCrc As Integer = 0

        ' zapis komendy
        oWriter.WriteByte(iCmd)
        iCrc = iCmd

        'zapis buforu
        oWriter.WriteByte(b1)
        iCrc += b1
        oWriter.WriteByte(b2)
        iCrc += b2
        oWriter.WriteByte(b3)
        iCrc += b3
        oWriter.WriteByte(b4)
        iCrc += b4
        oWriter.WriteByte(b5)
        iCrc += b5
        oWriter.WriteByte(b6)
        iCrc += b6
        oWriter.WriteByte(b7)
        iCrc += b7
        oWriter.WriteByte(b8)
        iCrc += b8
        oWriter.WriteByte(b9)
        iCrc += b9
        oWriter.WriteByte(b10)
        iCrc += b10
        oWriter.WriteByte(b11)
        iCrc += b11
        oWriter.WriteByte(b12)
        iCrc += b12
        oWriter.WriteByte(b13)
        iCrc += b13
        oWriter.WriteByte(b14)
        iCrc += b14

        oWriter.WriteByte(iCrc Mod 256)


        Dim oChar As GattCharacteristic = Await GetBLEcharact("6e40fff0-b5a3-f393-e0a9-e50e24dcca9e", "6e400002-b5a3-f393-e0a9-e50e24dcca9e", True)
        If oChar Is Nothing Then
            IntLogAppend(0, "SBC ERR getblecharact null")
            Return Nothing
        End If

        If mBLEwait Then
            IntLogAppend(0, "SBC ERR ble wait")
            DialogBox("cannot send BLE command - another in progress... ")
            Return Nothing
        End If
        mBLEresponseReady = False

        Dim oCharRd As GattCharacteristic

        If iWaitSecsForResponse > 0 Then
            oCharRd = Await GetBLEcharact("6e40fff0-b5a3-f393-e0a9-e50e24dcca9e", "6e400003-b5a3-f393-e0a9-e50e24dcca9e", True)
            If Not oCharRd.CharacteristicProperties.HasFlag(GattCharacteristicProperties.Notify) Then
                IntLogAppend(0, "SBC ERR chars w/o notify")
                DialogBox("notify to chars without notify property?")
                Return Nothing
            End If
            mBLEwait = True
            ' za https://docs.microsoft.com/en-us/windows/uwp/devices-sensors/gatt-client
            Dim oResNot As GattCommunicationStatus = Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify)
            If oResNot <> GattCommunicationStatus.Success Then
                IntLogAppend(0, "SBC ERR notify subscr error")
                DialogBox("notify subscription error")
                mBLEwait = False
                Return Nothing
            End If
            AddHandler oCharRd.ValueChanged, AddressOf BTcharOnNotify
        End If

        If Not oChar.CharacteristicProperties.HasFlag(GattCharacteristicProperties.Write) Then
            IntLogAppend(0, "SBC ERR write w/o write")
            DialogBox("writing to chars without write property")
            mBLEwait = False
            Return Nothing
        End If

        Dim oRes As GattCommunicationStatus = Await oChar.WriteValueAsync(oWriter.DetachBuffer)

        If oRes <> GattCommunicationStatus.Success Then
            IntLogAppend(0, "SBC ERR write error")
            DialogBox("writing to chars error")
            mBLEwait = False
            Return Nothing
        End If

        Dim aByte As Byte() = {1}
        If iWaitSecsForResponse = 0 Then Return aByte

        For iWait As Integer = 1 To iWaitSecsForResponse   ' licznik sekund
            For jWait As Integer = 1 To 5          ' ta petla ma byc na sekundę
                Await Task.Delay(200)
                If mBLEresponseReady Then
                    mBLEwait = False
                    Return moResponseData
                End If
            Next
        Next

        ' jest assigned value - tyle ze w IF, ale bez tego IF nie dojdzie tutaj
#Disable Warning BC42104 ' Variable is used before it has been assigned a value
        Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.None)
#Enable Warning BC42104 ' Variable is used before it has been assigned a value
        mBLEwait = False

        IntLogAppend(0, "SBC ERR timeout")
        DialogBox("timeout waiting for response")
        Return Nothing

        '  a jesli bylo z read, to np. 20 prob po 100 ms, czekanie na znikniecie sygnalu "czekanie"
        ' a sygnal znikany jest z BTcharOnNotify po wczytaniu bufora
    End Function

    Public Shared Sub BTcharOnNotify(sender As GattCharacteristic, args As GattValueChangedEventArgs)
        Dim oRdr As DataReader = DataReader.FromBuffer(args.CharacteristicValue)

        moResponseLen = oRdr.UnconsumedBufferLength
        ReDim moResponseData(moResponseLen - 1)

        'For i = 0 To moResponseLen - 1
        '    moResponseData(i) = oRdr.ReadByte
        'Next
        oRdr.ReadBytes(moResponseData)

        ' tu mozna sprawdzac CRC...

        mBLEresponseReady = True

        ' Await sender.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.None)

    End Sub
#End Region

    Public Shared Function BCD(iInt As Integer) As Byte
        Dim iH As Integer = iInt \ 10
        Dim iL As Integer = iInt Mod 10
        Return iH * 16 + iL
    End Function

    Public Shared Function deBCD(iBcd As Integer) As Integer
        Dim iH As Integer = iBcd \ 16
        Dim iL As Integer = iBcd Mod 16
        Return iH * 10 + iL
    End Function

    Public Shared Async Function BandSendTime(oDate As DateTime) As Task
        ' na podstawie
        ' com/oudmon/bandapi/req/SetTimeReq;
        ' Lcom/oudmon/bandapi/OdmHandle$1;  - tu jest że bez callback (w OnConnect)

        Await SendBandCommand(0, 1,
                            BCD(oDate.Year - 2000), BCD(oDate.Month), BCD(oDate.Day),
                            BCD(oDate.Hour), BCD(oDate.Minute), BCD(oDate.Second))
    End Function


    Public Shared Function Min2HrMin(iMinsTime As Integer) As String
        Dim iHr As Integer = iMinsTime \ 60
        Dim iMin As Integer = iMinsTime Mod 60
        Return iHr & ": " & iMin
    End Function

    Public Shared Async Function SendBandMsg(iType As Integer, sTxt As String) As Task
        If sTxt.Length > &H3F Then sTxt = sTxt.Substring(0, &H40)
        If sTxt = "" Then Exit Function
        If iType > 9 Then Exit Function
        ' z .class public Lcom/oudmon/bandapi/req/PushMsgUintReq:
        '.field public static final TYPE_FACEBOOK:B = 0x5t
        '.field public static final TYPE_Line:B = 0x9t
        '.field public static final TYPE_PHONE_ACTION:B = 0x4t - nie chce działać?
        '.field public static final TYPE_PHONE_RING:B = 0x0t - brzeczy do skutku
        '.field public static final TYPE_QQ:B = 0x2t
        '.field public static final TYPE_SKYPE:B = 0x8t
        '.field public static final TYPE_SMS:B = 0x1t
        '.field public static final TYPE_TWITTER:B = 0x7t
        '.field public static final TYPE_WECHAT:B = 0x3t
        '.field public static final TYPE_WHATSAPP:B = 0x6t

        Dim utf8Encoding As UTF8Encoding = New System.Text.UTF8Encoding(True)
        Dim utf8 As Byte() = utf8Encoding.GetBytes(sTxt)

        Dim iLen As Integer = utf8.Length
        Dim iParts As Integer = iLen \ 11   ' bylo w oryginale przerobienie iParts z 0 na 1, ale skoro nie moze byc pustego lancucha, to bedzie to z modulo
        If iLen Mod 11 > 0 Then iParts += 1

        For i As Integer = 0 To iParts - 2     ' najpierw to, co jest pelne
            Dim aRet As Byte() = Await SendBandCommand(1, &H72, iType, iParts, i,
                                    utf8(i * 11 + 0), utf8(i * 11 + 1), utf8(i * 11 + 2), utf8(i * 11 + 3), utf8(i * 11 + 4),
                                    utf8(i * 11 + 5), utf8(i * 11 + 6), utf8(i * 11 + 7), utf8(i * 11 + 8), utf8(i * 11 + 9),
                                    utf8(i * 11 + 10))
        Next

        Dim ind As Integer = (iParts - 1) * 11
        If iLen > ind Then        ' a teraz pozostalosc
            Dim aByte(12) As Byte
            For i As Integer = 0 To 10
                If iLen > ind + i Then aByte(i) = utf8(ind + i)
            Next
            Dim aRet As Byte() = Await SendBandCommand(1, &H72, iType, iParts, iParts,
                                    aByte(0), aByte(1), aByte(2), aByte(3), aByte(4),
                                    aByte(5), aByte(6), aByte(7), aByte(8), aByte(9),
                                    aByte(10))
        End If

    End Function

    Private Shared mbBTbefore = False   ' stan przed BTradioStart - do ktorego trzeba wrocic
    Private Shared mbBTinside = False   ' czy wewnatrz bloku BTradioStart..BTradioEnd

    ' włączenie BT przed operacjami timerowymi
    Public Shared Async Function BTradioStart() As Task(Of Boolean)
        IntLogAppend(1, "BTradiostart")

        If mbBTinside Then
            IntLogAppend(0, "BRS in BRS block?")
            Return False ' 20180811
        End If
        mbBTinside = True

        ' wedle https://social.msdn.microsoft.com/Forums/vstudio/en-US/045a83ea-638c-43a6-9a72-4e999ccc5132/how-to-enable-ou-disable-bluetooth-in-c-uwp?forum=tabletandtouch
        ' try/catch po v1.1.1, gdyż w tej funkcji jest 33 crash
        Dim adapter As BluetoothAdapter = Nothing
        Try
            adapter = Await BluetoothAdapter.GetDefaultAsync()
        Catch ex As Exception
        End Try

        IntLogAppend(2, "BRS has adapter")
        If adapter Is Nothing Then Return False
        IntLogAppend(2, "BRS Not null")

        Dim oRadio As Radio = Nothing
        Try
            oRadio = Await adapter.GetRadioAsync()
        Catch ex As Exception
        End Try
        If oRadio Is Nothing Then Return False


        IntLogAppend(2, "BRS has oradio")

        Select Case oRadio.State
            Case RadioState.Disabled
                IntLogAppend(2, "BRS przed: Disabled")
                mbBTbefore = False
                Return False
            Case RadioState.On
                mbBTbefore = True
                IntLogAppend(2, "BRS przed: ON")
                Return True
            Case RadioState.Unknown
                mbBTbefore = False
                IntLogAppend(2, "BRS przed: Unknown")
            Case RadioState.Off
                mbBTbefore = False
                IntLogAppend(2, "BRS przed: OFF")
        End Select

        Try
            Await oRadio.SetStateAsync(RadioState.On)
        Catch ex As Exception
        End Try

        If oRadio.State <> RadioState.On Then Return False
        IntLogAppend(2, "BRS po: ON")

        Return True

    End Function

    ' wyłączenie BT przed operacjami timerowymi
    Public Shared Async Function BTradioEnd() As Task
        mbBTinside = False
        If mbBTbefore Then Exit Function
        IntLogAppend(1, "BRE trying to get adapter")

        Dim adapter As BluetoothAdapter = Await BluetoothAdapter.GetDefaultAsync()
        If adapter Is Nothing Then Exit Function
        IntLogAppend(2, "BRE Not null")
        Dim oRadio As Radio = Await adapter.GetRadioAsync()
        IntLogAppend(2, "BRE getting oRadio")
        Await oRadio.SetStateAsync(RadioState.Off)
        IntLogAppend(2, "BRE switched off")
    End Function

    Public Shared Async Function GetLogFile(sName As String) As Task(Of StorageFile)

        Dim oFold As StorageFolder = Nothing
        ' ale checa! gdy nie bylo "As SF:, wtedy sie pojawial error z brakiem resource zwiazany!

        Try
            If AnalyticsInfo.VersionInfo.DeviceFamily = "Windows.Mobile" Then
                Dim externalDevices As StorageFolder = KnownFolders.RemovableDevices
                Dim oCards As IReadOnlyList(Of StorageFolder) = Await externalDevices.GetFoldersAsync()
                oFold = oCards.FirstOrDefault()
                If oFold IsNot Nothing Then oFold = Await oFold.CreateFolderAsync("DataLogs", CreationCollisionOption.OpenIfExists)
                If oFold IsNot Nothing Then oFold = Await oFold.CreateFolderAsync("SmartBand", CreationCollisionOption.OpenIfExists)
            Else
                oFold = Windows.Storage.ApplicationData.Current.LocalFolder
            End If
        Catch ex As Exception
        End Try

        If oFold Is Nothing Then
            DialogBoxRes("errDataFolder")
            Return Nothing
        End If

        Dim bErr As Boolean = False
        Dim oFile As StorageFile = Nothing
        Try
            oFile = Await oFold.CreateFileAsync(sName & ".log", CreationCollisionOption.OpenIfExists)
        Catch ex As Exception
            bErr = True
        End Try

        If bErr Then
            Return Nothing
        End If

        Return oFile

    End Function

    Public Shared Async Function AppendLog(sName As String, sValue As String, sRemark As String) As Task
        Dim oFile As StorageFile = Await GetLogFile(sName)
        If oFile Is Nothing Then Exit Function

        Dim sTxt As String = Date.Now.ToString("yyyy.MM.dd HH:mm:ss") & vbTab & sValue & vbTab & sRemark & vbCrLf
        Await FileIO.AppendTextAsync(oFile, sTxt)
    End Function

    Public Shared Async Function ReadKroki() As Task(Of Integer())
        IntLogAppend(1, "ReadKroki - start")
        IntLogAppend(2, "RK before SendBarCommand")
        Dim aArr As Byte() = Await App.SendBandCommand(5, &H48)
        IntLogAppend(2, "RK got response")
        If aArr Is Nothing Then
            IntLogAppend(2, "RK aArr = null")
            Return Nothing
        End If
        IntLogAppend(2, "RK aArr(0)=" & aArr(0))
        If aArr(0) <> &H48 Then ' error = 0x1f | 0x80
            IntLogAppend(2, "RK bad aArr(0)")
            Return Nothing
        End If
        IntLogAppend(2, "RK before Dim aRet")
        Dim aRet(6) As Integer
        IntLogAppend(2, "RK aRet ready")
        aRet(1) = (aArr(1) * 256 + aArr(2)) * 256 + aArr(3)
        aRet(2) = (aArr(4) * 256 + aArr(5)) * 256 + aArr(6)
        aRet(3) = (aArr(7) * 256 + aArr(8)) * 256 + aArr(9)
        aRet(4) = (aArr(10) * 256 + aArr(11)) * 256 + aArr(12)
        aRet(5) = aArr(13) * 256 + aArr(14)
        IntLogAppend(2, "RK copied array")
        Return aRet
    End Function

    Public Shared Async Function TimerWriteSteps(aArr() As Integer) As Task
        IntLogAppend(1, "TimerWriteSteps - start")
        If aArr Is Nothing Then aArr = Await ReadKroki()
        IntLogAppend(2, "TWS got aArr")
        'Dim sCurrentSteps As String = "Total steps: " & aArr(1)
        'Dim sRunningSteps As String = "Running steps: " & aArr(2)
        'Dim sCalories As String = "Energy: " & (aArr(3) / 1000) & " kcal"
        'Dim sDistance As String = "Distance: " & (aArr(4)) / 1000 & " km"
        'Dim sDuration As String = "Duration: " & App.Min2HrMin(aArr(5)) & " min"

        Dim sCurrentSteps As String = (aArr(1)).ToString
        Dim sRunningSteps As String = (aArr(2)).ToString
        Dim sCalories As String = (aArr(3) / 1000).ToString & " kcal"
        Dim sDistance As String = (aArr(4) / 1000).ToString & " km"
        Dim sDuration As String = App.Min2HrMin(aArr(5)) & " min"

        Dim sLogVal As String = aArr(1)
        Dim sLogRem As String = "(" & sRunningSteps & ", " & sCalories & ", " & sDistance & "," & sDuration & ")"

        IntLogAppend(2, "TWS strings created")


        ' Await App.AppendLog("steps", sCurrentSteps & vbCrLf & sRunningSteps & vbCrLf & sCalories & vbCrLf & sDistance & vbCrLf & sDuration)
        Await App.AppendLog("steps", sLogVal, sLogRem)

    End Function

    Public Shared Async Sub RegisterTriggers()
        IntLogAppend(1, "RegisterTriggers - START")
        Dim oBAS As BackgroundAccessStatus
        oBAS = Await BackgroundExecutionManager.RequestAccessAsync()

        If oBAS = BackgroundAccessStatus.AlwaysAllowed Or oBAS = BackgroundAccessStatus.AllowedSubjectToSystemPolicy Then
            '    ' https://docs.microsoft.com/en-us/windows/uwp/launch-resume/create-And-register-an-inproc-background-task

            For Each oTask As KeyValuePair(Of Guid, IBackgroundTaskRegistration) In BackgroundTaskRegistration.AllTasks
                If oTask.Value.Name.IndexOf("PKARminiHejBand_Timer") > -1 Then oTask.Value.Unregister(True)
            Next

            Dim builder As BackgroundTaskBuilder = New BackgroundTaskBuilder
            Dim oRet As BackgroundTaskRegistration

            builder.SetTrigger(New TimeTrigger(App.GetSettingsInt("timerEvery", 30), False))
            builder.Name = "PKARminiHejBand_Timer"
            oRet = builder.Register()
        End If

    End Sub

    Shared mIntLogLevel As Integer = 1
    Public Shared Sub IntLogAppend(iLevel As Integer, sStr As String)
        If iLevel > App.GetSettingsInt("logLevel", 0) Then Exit Sub
        Dim sTxt As String = App.GetSettingsString("internalog") & vbCrLf & Date.Now.ToString("HH:mm") & " " & sStr
        App.SetSettingsString("internalog", sTxt)
    End Sub
    'Public Shared Sub IntLogSetLevel(iLevel As Integer)
    '    mIntLogLevel = iLevel
    'End Sub

#Region "timery"

    Private moTimerDeferal As BackgroundTaskDeferral = Nothing

    Private Async Function TriggerGodzinny() As Task
        Dim iHr As Integer = Date.Now.Hour

        IntLogAppend(1, "TriggerGodzinny - START")

        If iHr <> 11 And iHr <> 23 Then Exit Function  ' interesujące są tuż przed południem i tuż przed północą

        If iHr = 11 Then
            IntLogAppend(2, "hour = 11")
        End If

        If iHr = 23 Or iHr = 13 Then ' mialo byc 23
            IntLogAppend(2, "hour = 23")
            If App.GetSettingsBool("autosaveSteps") Then
                Await TimerWriteSteps(Nothing)
            End If
        End If

    End Function

    Private Async Function TriggerSMS(oTD As SmsMessageReceivedTriggerDetails) As Task
        'SmsReceivedEventDetails smsDetails = (SmsReceivedEventDetails)taskInstance.TriggerDetails;
        'SmsBinaryMessage smsEncodedmsg = (SmsBinaryMessage) smsDetails.BinaryMessageMessage;
        'SmsTextMessage smsTextMessage = Windows.Devices.Sms.SmsTextMessage.FromBinaryMessage(smsEncodedmsg);
        Dim sTxt As String = "new SMS arrived"
        If oTD.MessageType = SmsMessageType.Text Then
            sTxt = oTD.TextMessage.CallbackNumber
        End If
        Await SendBandMsg(1, sTxt)
    End Function
    Private Async Function TriggerTimerTetno() As Task
        App.IntLogAppend(1, "TriggerTimerTetno")

        If GetSettingsBool("notifyPomiar") Then
            If Date.Now.Hour >= GetSettingsInt("notifyBegin", 9) AndAlso Date.Now.Hour <= GetSettingsInt("notifyEnd", 20) Then
                Await SendBandMsg(2, "pomiar")
                Await Task.Delay(5000)
                IntLogAppend(2, "TTT after 5 sec wait")
            End If
        End If

        If Not Await App.measureSomethingStart(6) Then Exit Function
        Await Task.Delay(10000)
        IntLogAppend(2, "TTT after 10 sec wait")
        Dim iAvg As Integer = Await App.measureSomethingLoopNew(200, 0, 10, Nothing, "")
        IntLogAppend(2, "TTT have AVG = " & iAvg)
        Dim oAsync As Task = App.measureSomethingStop()
        Await App.AppendLog("tetno", iAvg, "")
        Await oAsync
    End Function
#End Region

    Protected Overrides Async Sub OnBackgroundActivated(args As BackgroundActivatedEventArgs)

        '        If moTimerDeferal IsNot Nothing Then Exit Sub   ' juz jeden jest, choc nie powinien
        moTimerDeferal = args.TaskInstance.GetDeferral()


        ' wlacz na wszelki wypadek - czasem bedzie niepotrzebnie, jak nie bedzie godzinnika ani zadnego autoBadania
        If Not Await BTradioStart() Then
            moTimerDeferal.Complete()
            Exit Sub ' nieudane wlaczenie Bluetooth
        End If

        Select Case args.TaskInstance.Task.Name
            Case "PKARminiHejBand_Timer"
                If Date.Now.Minute + App.GetSettingsInt("timerEvery", 30) > 59 Then
                    ' godzinnik
                    Await TriggerGodzinny()
                End If
                If GetSettingsBool("timerTetno") Then Await TriggerTimerTetno()
                If Date.Now.Hour = 0 Then
                    If App.GetSettingsBool("syncClock") Then
                        If Date.Now.Minute < App.GetSettingsInt("timerEvery", 30) Then
                            Await App.BandSendTime(Date.Now)
                        End If
                    End If

                End If
                    Case "PKARminiHejBand_SMS"
                Dim oTD As SmsMessageReceivedTriggerDetails = TryCast(args.TaskInstance.TriggerDetails, SmsMessageReceivedTriggerDetails)
                Await TriggerSMS(oTD)
                'Case "PKARminiHejBand_TimerTetno"
                '    Await TriggerTimerTetno()
        End Select



        Await BTradioEnd()   ' jesli wlaczales, to wylacz BT
        moTimerDeferal.Complete()

    End Sub

#Region "Pomiary zdrowotne - library"

    Private Shared mbMeasuring = 0
    Private Shared mbStopByte1 As Byte = 0
    Private Shared mbStopByte2 As Byte = 0

    Public Shared Async Function measureSomethingStart(iType As Integer) As Task(Of Boolean)
        IntLogAppend(1, "measureSomethingStart - START")
        If mbMeasuring > 0 Then Return False
        Dim iAction As Integer = 1
        If iType >= 3 And iType <> 6 Then iAction = 25  ' w getSimpleReq(type): BCD(0x19) ' else: iAction=0

        '        App.IntLogSetLevel(1)   ' tylko bledy i START

        Dim aArr As Byte() = Await App.SendBandCommand(5, &H69, iType, 1)
        If aArr Is Nothing Then Return False ' 20180811, gdy wraca Null
        If aArr(0) <> &H69 Then Return False
        If aArr(1) <> iType Then Return False

        mbMeasuring = iType
        Return True
    End Function

    Public Shared Async Function measureSomethingLoopNew(iMax As Integer, iMin As Integer, iLoop As Integer, uiText As TextBlock, sPrefix As String) As Task(Of Integer)
        IntLogAppend(1, "measureSomethingLoopNew - START")
        Dim aWyniki(100) As Byte

        Dim oCharRd As GattCharacteristic

        oCharRd = Await GetBLEcharact("6e40fff0-b5a3-f393-e0a9-e50e24dcca9e", "6e400003-b5a3-f393-e0a9-e50e24dcca9e", True)
        If Not oCharRd.CharacteristicProperties.HasFlag(GattCharacteristicProperties.Notify) Then
            IntLogAppend(0, "MSLN ERR w/o notify")
            DialogBox("notify to chars without notify property?")
            Return Nothing
        End If
        IntLogAppend(2, "MSLN got oCharRd")

        mBLEwait = True
        Dim oResNot As GattCommunicationStatus = Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify)
        If oResNot <> GattCommunicationStatus.Success Then
            IntLogAppend(0, "MSLN ERR notify subs")
            DialogBox("notify subscription error")
            mBLEwait = False
            Return Nothing
        End If
        AddHandler oCharRd.ValueChanged, AddressOf BTcharOnNotify ' czy nie trzeba innego?
        IntLogAppend(2, "MSLN added handler")

        'stare

        Dim iAvg As Integer = 0
        Dim iCnt As Integer = 0

        For i As Integer = 1 To 10
            'App.IntLogSetLevel(0)   ' tylko bledy

            For iWait As Integer = 1 To 3 ' licznik sekund
                For jWait As Integer = 1 To 5          ' ta petla ma byc na sekundę
                    Await Task.Delay(100)
                    If mBLEresponseReady Then
                        mBLEwait = False
                        Exit For
                    End If
                    If Not mBLEwait Then Exit For
                Next
            Next
            If mBLEwait Then Exit For ' nie odczytalo (przynajmniej w tym przebiegu petli)

            Dim aArr As Byte() = moResponseData   ' zeby nie zmieniac cytatu z MSL
            ' App.IntLogSetLevel(1)   ' tylko bledy i START

            IntLogAppend(1, "MSLN loop, i=" & i)

            If aArr(0) <> &H69 Then
                If uiText IsNot Nothing Then uiText.Text = sPrefix & " bad response (cmd code)"
                Exit For
            End If
            If aArr(1) <> mbMeasuring Then
                If uiText IsNot Nothing Then uiText.Text = sPrefix & " bad response (type)"
                Exit For
            End If
            If aArr(2) <> 0 Then
                If uiText IsNot Nothing Then uiText.Text = sPrefix & " returned errcode = " & aArr(1)
                Exit For
            End If

            If uiText IsNot Nothing Then uiText.Text = sPrefix & " ... measuring - please wait ..."
            If aArr(3) > 0 Then ' wynik > 0
                Dim iData As Byte = aArr(3)
                aWyniki(iCnt) = iData
                iMax = Math.Min(iMax, iData)
                iMin = Math.Max(iMin, iData)
                iAvg += iData
                iCnt += 1
                If uiText IsNot Nothing Then uiText.Text = sPrefix & iData & " (min: " & iMax & ", max: " & iMin & ", avg: " & iAvg \ iCnt & ", pomiar: " & i & ")"
            End If
            mbStopByte1 = aArr(3)
            mbStopByte2 = aArr(4)
        Next

        Await oCharRd.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.None)

        If mBLEwait Then
            mBLEwait = False
            IntLogAppend(0, "MSLN ERR timeout")
            If uiText IsNot Nothing Then DialogBox("MSLN timeout waiting for response")
            Return Nothing
        End If

        If iCnt > 0 Then    ' iCnt = ile jest wynikow, czyli tablica(0..iCnt-1)
            iAvg = iAvg \ iCnt
            If uiText IsNot Nothing Then uiText.Text = sPrefix & " last: " & aWyniki(iCnt - 1) & " (min: " & iMin & ", max: " & iMax & ", avg: " & iAvg & ", pomiarów: " & iCnt & ")"
            Return iAvg
        Else
            If uiText IsNot Nothing Then uiText.Text = sPrefix & " no available data?"
            Return 0    ' means error
        End If

    End Function


    Public Shared Async Function measureSomethingLoop(iMax As Integer, iMin As Integer, uiText As TextBlock, sPrefix As String) As Task(Of Integer)
        IntLogAppend(1, "measureSomethingLoop - START")
        Dim aWyniki(100) As Byte

        Dim iAvg As Integer = 0
        Dim iCnt As Integer = 0

        For i As Integer = 1 To 10
            'App.IntLogSetLevel(0)   ' tylko bledy
            Dim aArr As Byte() = Await App.WaitForBandNotify(3)
            'App.IntLogSetLevel(1)   ' tylko bledy i START
            IntLogAppend(1, "MSL loop, i=" & i)
            If aArr(0) <> &H69 Then
                If uiText IsNot Nothing Then uiText.Text = sPrefix & " bad response (cmd code)"
                Exit For
            End If
            If aArr(1) <> mbMeasuring Then
                If uiText IsNot Nothing Then uiText.Text = sPrefix & " bad response (type)"
                Exit For
            End If
            If aArr(2) <> 0 Then
                If uiText IsNot Nothing Then uiText.Text = sPrefix & " returned errcode = " & aArr(1)
                Exit For
            End If

            If uiText IsNot Nothing Then uiText.Text = sPrefix & " ... measuring - please wait ..."
            If aArr(3) > 0 Then ' wynik > 0
                Dim iData As Byte = aArr(3)
                aWyniki(iCnt) = iData
                iMax = Math.Min(iMax, iData)
                iMin = Math.Max(iMin, iData)
                iAvg += iData
                iCnt += 1
                If uiText IsNot Nothing Then uiText.Text = sPrefix & iData & " (min: " & iMax & ", max: " & iMin & ", avg: " & iAvg \ iCnt & ", pomiar: " & i & ")"
            End If
            mbStopByte1 = aArr(3)
            mbStopByte2 = aArr(4)
        Next


        If iCnt > 0 Then    ' iCnt = ile jest wynikow, czyli tablica(0..iCnt-1)
            iAvg = iAvg \ iCnt
            If uiText IsNot Nothing Then uiText.Text = sPrefix & " last: " & aWyniki(iCnt - 1) & " (min: " & iMin & ", max: " & iMax & ", avg: " & iAvg & ", pomiarów: " & iCnt & ")"
            Return iAvg
        Else
            If uiText IsNot Nothing Then uiText.Text = sPrefix & " no available data?"
            Return 0    ' means error
        End If

    End Function


    Public Shared Async Function measureSomethingStop() As Task
        IntLogAppend(1, "measureSomethingStop - START")
        'Dim aArr As Byte() = Await App.SendBandCommand(5, &H6A, mbMeasuring, mbStopByte1, mbStopByte2)    'wyłączamy
        Dim aArr As Byte() = Await App.SendBandCommand(5, &H69, mbMeasuring, 4)    'wyłączamy
        mbMeasuring = 0
        'App.IntLogSetLevel(2)   ' wszystko
    End Function

#End Region

End Class
